package pokedex;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.table.*;
        
public class ViewPkmn extends JPanel
{    
    public BasicArrowButton left, right;
    public boolean pkmnSet = false;
    public DefaultTableModel movesetModel, hmModel, tmModel;
    public JLabel imageLbl, imageLbl2, weightLbl, heightLbl, expGainLbl;
    public JList pkmnList = new JList();
    public JPanel pkmnPnl, entryPnl, movePnl, imagePnl, displayPnl, statsPnl, tmPnl, hmPnl, areaPnl, evolutionPnl;
    public JScrollPane pkdxEntryPane, movePane, tmPane, hmPane, 
            pkmnScroll = new JScrollPane();
    public JTable moveTable, hmTable, tmTable;
    public JTextPane pkdxEntry;
    public JTextField type1, type2, pkmnName, pkmnNum, pkmnWeight, pkmnHeight, expGain;
    public JTabbedPane pkmnInfo;
    public String pkmn, 
            game = "";
    
    public ViewPkmn()
    {        
        pkmnNum = new JTextField();
            pkmnNum.setBounds(5, 5, 35, 20);
            pkmnNum.setEditable(false);
            pkmnNum.setBackground(Color.white);
            pkmnNum.setHorizontalAlignment(JTextField.CENTER);
            
        pkmnName = new JTextField();
            pkmnName.setBounds(pkmnNum.getX() + pkmnNum.getWidth() + 10, pkmnNum.getY(), 150, 20);
            pkmnName.setEditable(false);
            pkmnName.setHorizontalAlignment(JTextField.LEFT);
            pkmnName.setBackground(Color.white);
            
        pkdxEntry = new JTextPane();
            pkdxEntry.setEditable(false);
            pkdxEntry.setBackground(Color.white);
        pkdxEntryPane = new JScrollPane(pkdxEntry);
            pkdxEntryPane.setBounds(pkmnNum.getX(), pkmnNum.getY() + pkmnNum.getHeight() + 5, 195, 137);
            pkdxEntryPane.setBackground(Color.white);
        
        left = new BasicArrowButton(BasicArrowButton.WEST);
            left.setBounds(pkmnName.getX() + pkmnName.getWidth() + 5, pkmnName.getY(), 20, 20);
            left.setEnabled(false);
        imageLbl2 = new JLabel();
            imageLbl2.setBounds((left.getX() + left.getWidth()), left.getY(), 205, 20);
            imageLbl2.setHorizontalAlignment(JLabel.CENTER);
        right = new BasicArrowButton(BasicArrowButton.EAST);
            right.setBounds(imageLbl2.getWidth() + imageLbl2.getX(), imageLbl2.getY(), 20, 20);
            right.setEnabled(false);
        imageLbl = new JLabel();
            imageLbl.setBounds(left.getX(), left.getHeight() + left.getY() + 5, 245, 137);
            imageLbl.setBorder(BorderFactory.createLineBorder(Color.gray));
            imageLbl.setOpaque(true);
            imageLbl.setBackground(Color.white);
        
        type1 = new JTextField();
            type1.setEditable(false);
            type1.setBackground(Color.white);
            type1.setHorizontalAlignment(JTextField.CENTER);
            type1.setBounds(5, 5, 75, 20);
           
        type2 = new JTextField();
            type2.setEditable(false);
            type2.setBackground(Color.white);
            type2.setHorizontalAlignment(JTextField.CENTER);
            type2.setBounds(type1.getX() + type1.getWidth() + 5, type1.getY(), 75, 20);
            
        heightLbl = new JLabel("Height:");
            heightLbl.setBounds(type1.getX(), type1.getY() + type1.getHeight() + 5, 70, 20);
            
        pkmnHeight = new JTextField();
            pkmnHeight.setEditable(false);
            pkmnHeight.setBackground(Color.white);
            pkmnHeight.setHorizontalAlignment(JTextField.CENTER);
            pkmnHeight.setBounds(heightLbl.getX() + heightLbl.getWidth() + 10, heightLbl.getY(), 75, 20);
        
        weightLbl = new JLabel("Weight:");
            weightLbl.setBounds(heightLbl.getX(), heightLbl.getY() + heightLbl.getHeight() + 5, 70, 20);
        
        pkmnWeight = new JTextField();
            pkmnWeight.setEditable(false);
            pkmnWeight.setBackground(Color.white);
            pkmnWeight.setHorizontalAlignment(JTextField.CENTER);
            pkmnWeight.setBounds(weightLbl.getX() + weightLbl.getWidth() + 10, weightLbl.getY(), 75, 20);
            
        expGainLbl = new JLabel("Exp. Growth:");
            expGainLbl.setBounds(weightLbl.getX(), weightLbl.getY() + weightLbl.getHeight() + 5, 75, 20);
        
        expGain = new JTextField();
            expGain.setEditable(false);
            expGain.setBackground(Color.white);
            expGain.setHorizontalAlignment(JTextField.CENTER);
            expGain.setBounds(expGainLbl.getX() + expGainLbl.getWidth() + 5, expGainLbl.getY(), 75, 20);
            
        statsPnl = new JPanel();
            statsPnl.setBounds(0, 0, 205, 70);
            statsPnl.setLayout(null);
            statsPnl.add(type1);
            statsPnl.add(type2);
            statsPnl.add(heightLbl);
            statsPnl.add(pkmnHeight);
            statsPnl.add(weightLbl);
            statsPnl.add(pkmnWeight); 
            statsPnl.add(expGainLbl);
            statsPnl.add(expGain);
            
        movesetModel = new DefaultTableModel(new String[]{"Level", "Attack", "Description"}, 1);
        moveTable = new JTable(movesetModel);
            moveTable.getColumnModel().getColumn(0).setMinWidth(55);
            moveTable.getColumnModel().getColumn(0).setMaxWidth(55);
            moveTable.getColumnModel().getColumn(1).setMinWidth(100);
            moveTable.getColumnModel().getColumn(1).setMaxWidth(100);
            moveTable.getTableHeader().setReorderingAllowed(false);
            moveTable.setRowHeight(20);
            moveTable.setEnabled(false);
        movePane = new JScrollPane(moveTable);
            movePane.setBounds(5, 5, 432, 195);
            movePane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        movePnl = new JPanel();
            movePnl.setBounds(0, 0, 450, 200);
            movePnl.setLayout(null);           
            movePnl.add(movePane);
            
        tmModel = new DefaultTableModel(new String[]{"TM", "Attack", "Description"}, 1);
        tmTable = new JTable(tmModel);
            tmTable.getColumnModel().getColumn(0).setMinWidth(55);
            tmTable.getColumnModel().getColumn(0).setMaxWidth(55);
            tmTable.getColumnModel().getColumn(1).setMinWidth(100);
            tmTable.getColumnModel().getColumn(1).setMaxWidth(100);
            tmTable.getTableHeader().setReorderingAllowed(false);
            tmTable.setRowHeight(20);
            tmTable.setEnabled(false);
        tmPane = new JScrollPane(tmTable);
            tmPane.setBounds(5, 5, 432, 195);
            tmPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        tmPnl = new JPanel();
            tmPnl.setBounds(0, 0, 450, 200);
            tmPnl.setLayout(null);           
            tmPnl.add(tmPane);
            
        hmModel = new DefaultTableModel(new String[]{"HM", "Attack", "Description"}, 1);
        hmTable = new JTable(hmModel);
            hmTable.getColumnModel().getColumn(0).setMinWidth(55);
            hmTable.getColumnModel().getColumn(0).setMaxWidth(55);
            hmTable.getColumnModel().getColumn(1).setMinWidth(100);
            hmTable.getColumnModel().getColumn(1).setMaxWidth(100);
            hmTable.getTableHeader().setReorderingAllowed(false);
            hmTable.setRowHeight(20);
            hmTable.setEnabled(false);
        hmPane = new JScrollPane(hmTable);
            hmPane.setBounds(5, 5, 432, 195);
            hmPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        
        hmPnl = new JPanel();
            hmPnl.setBounds(0, 0, 450, 200);
            hmPnl.setLayout(null);           
            hmPnl.add(hmPane);
            
        areaPnl = new JPanel();
            hmPnl.setBounds(0, 0, 450, 200);
            hmPnl.setLayout(null);
            
        evolutionPnl = new JPanel();
            evolutionPnl.setBounds(0, 0, 450, 200);
            evolutionPnl.setLayout(null);
            
        pkmnInfo = new JTabbedPane();
            pkmnInfo.setBounds(pkdxEntryPane.getX(), pkdxEntryPane.getY() + pkdxEntryPane.getHeight() + 5, 445, 230);
            pkmnInfo.add("Stats", statsPnl);
            pkmnInfo.add("Moves", movePnl);
            pkmnInfo.add("TM", tmPnl);
            pkmnInfo.add("HM", hmPnl);
            pkmnInfo.add("Area", areaPnl);
            pkmnInfo.add("Evolution", evolutionPnl);
            
        setLayout(null);
        setBounds(0, 0, 450, 405);
            add(pkmnNum);
            add(pkmnName);
            add(pkdxEntryPane);
            add(left);
            add(imageLbl2);
            add(right);
            add(imageLbl);
            add(pkmnInfo);
    }
    
    public void setPkmnList()
    {
        String[] pkmn = pkmnDB.getPkmn();
        
        for(int i = 0; i < pkmn.length; i++)
            pkmn[i] = String.format("%03d", i + 1) + ": " + pkmn[i];
        
        pkmnList.setListData(pkmn);
    }
    
    public void renameFiles(String[] pkmn)
    {   
        for(int i = 0; i <= pkmn.length; i++)
        {
            File file1 = new File("Images/Gen. 1/" + pkmn[i] + "-color.png");
            File file3 = new File("Images/Gen. 1/" + pkmn[i] + ".png");
            System.out.println(pkmn[i] + ", " + file1.exists());
            
            int num = i+1;
            
            String pkmnNum = String.format("%03d", num);
            
            File file2 = new File("Images/Gen. 1/" + pkmnNum + "y_color.png");
            File file4 = new File("Images/Gen. 1/" + pkmnNum + "y.png");
            
            if(file1.exists())
                file1.renameTo(file2);
            if(file3.exists())
                file3.renameTo(file4);
        }
    }
    
    public void setPkmn(String pokemon)
    {
        pkmn = pokemon;
    }
    
    public void setPkmnPanel()
    {   
        if(pkmnSet == false)
            pkmnSet = true;
        
        try
        {
            String[] pk = pkmnDB.getName(pkmn);
            String[] entry = pkmnDB.getEntry(pkmn);
            String[][] moveset = pkmnDB.getMoveset(pkmn);
            String[][] tmlearned = pkmnDB.getMachine("tm", pkmn);
            String[][] hmlearned = pkmnDB.getMachine("hm", pkmn);
            String[] type = pkmnDB.getPkmnType(pkmn);
            String[] stats = pkmnDB.getPkmnStats(pkmn);
            String[] cat = pkmnDB.getPkmnCat(pkmn);
            String[] stageInfo = pkmnDB.getStageInfo(pkmn);
            
            pkmnNum.setText(pkmn);

            if(pk.length > 0 && pk != null)
                pkmnName.setText(pk[0]);

            if(cat.length > 0 && cat != null && entry.length > 0 && entry != null)
                pkdxEntry.setText(cat[0] + "\n\n" + entry[0]);
            else if(entry.length > 0 && entry != null)
                pkdxEntry.setText(entry[0]);
            else
                pkdxEntry.setText("");

            setImage();

            if(type.length != 0)
            {
                type1.setText(type[0]);
                type2.setText(type[1]);
            }

            if(stats != null)
            {
                pkmnHeight.setText(String.format("%.1f", Double.parseDouble(stats[0])) + "m");
                pkmnWeight.setText(String.format("%.1f", Double.parseDouble(stats[1])) + "kg");
                expGain.setText(stats[2]);
            }

            evolutionPnl.removeAll();

            boolean branchPkmn = pkmn.equals("133");

            if(branchPkmn)
                evolutionPnl.add(new branchEvolution(stageInfo[2]));                                   
            else if(stageInfo[2].equals("stage3"))
                evolutionPnl.add(new threeStage(stageInfo[1]));
            else if(stageInfo[2].equals("stage2"))
                evolutionPnl.add(new twoStage(stageInfo[1]));
            else if(stageInfo[2].equals("stage1"))
                evolutionPnl.add(new singleStage(stageInfo[1]));
            else
                ;

            evolutionPnl.revalidate();
            evolutionPnl.repaint();

            updateTable(movesetModel, moveset);
            updateTable(tmModel, tmlearned);
            updateTable(hmModel, hmlearned);

            moveTable.getColumnModel().getColumn(2).setCellRenderer(new WordWrapCellRenderer());
            tmTable.getColumnModel().getColumn(2).setCellRenderer(new WordWrapCellRenderer()); 
            hmTable.getColumnModel().getColumn(2).setCellRenderer(new WordWrapCellRenderer());
        }
        catch(ClassCastException ex)
        {
            pkmnName.setText("");
            pkdxEntry.setText("");
            type1.setText("");
            type2.setText("");
            
            while(movesetModel.getRowCount() > 1)
                movesetModel.removeRow(0);
        }
        catch(NullPointerException ex)
        {
            System.out.println("Error: Object Not Defined");
        }
        catch(ArrayIndexOutOfBoundsException ex)
        {
            ex.printStackTrace();
            System.out.println("Error: Data Not Found");
        }
    }
    
    public boolean getStatus()
    {
        return pkmnSet;
    }
    
    private void updateTable(DefaultTableModel model, String[][] data)
    {
        if(data != null)
        {
            while(model.getRowCount() > 0)
                model.removeRow(0);

            if(data.length > 0)
                for(int i = 0; i < data.length; i++)
                    model.addRow(data[i]);

            if(model.getRowCount() == 0)
                model.addRow(new String[]{""});
        }
    }
    
    public void setImage()
    {
        String file = "Images/Gen. 1/" + pkmn + game;
        
        if(left.isEnabled())
        {
            file += "_color.png";
            imageLbl2.setText("Colorized");            
        }
        else 
        {
            right.setEnabled(true);
            file += ".png";
            imageLbl2.setText("Normal");
        }
            
        File image = new File(file);
        
        if(image.exists())
        {
            ImageIcon pkmnImage = new ImageIcon(file);
            int lblWidth = pkmnImage.getIconWidth();
            int lblHeight = pkmnImage.getIconHeight();
            int lblX = (imageLbl.getWidth() / 2) - (lblWidth / 2);
            int lblY = (imageLbl.getHeight() / 2) - (lblHeight / 2);

            imageLbl.setIcon(pkmnImage);
            imageLbl.setHorizontalAlignment(JLabel.CENTER);
        }
        else
            imageLbl.setIcon(null);
    }
    
    public void setGame(String str)
    {
        game = str;
        
        if(pkmnSet != false)
            setPkmnPanel();
    }
    
    public JList getList()
    {        
        return pkmnList;
    }
    
    public class WordWrapCellRenderer extends JTextArea implements TableCellRenderer 
    {
    
        WordWrapCellRenderer() 
        {
            setLineWrap(true);
            setWrapStyleWord(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) 
        {
            try
            {
                setText(value.toString());            
            }
            catch(NullPointerException ex)
            {
                setText("");
            }

            setSize(table.getColumnModel().getColumn(column).getWidth(), getPreferredSize().height);

            if (table.getRowHeight(row) != getPreferredSize().height)
                table.setRowHeight(row, getPreferredSize().height);

            return this;
        }
    }
    
/*
    Trade               101
    Fire Stone          102
    Leaf Stone          103
    Moon Stone          104
    Thunder Stone	105
    Water Stone         106

*/
    
    public class singleStage extends JPanel
    {
        String[] pkmnNum;
        
        public singleStage(){}
        
        public singleStage(String evoID)
        {
            pkmnNum = pkmnDB.getStages(evoID, "evolution_stage1");
            
            setSize(440, 200);
        }
        
        public void paintComponent(Graphics g)
        {   
            try
            {
                pkmnNum[1] = String.format("%3s", pkmnNum[1]).replace(' ', '0');
                String file = "Images/Gen. 1/" + pkmnNum[1] + game;  

                if(left.isEnabled())
                    file += "_color.png"; 
                else 
                    file += ".png";

                File image = new File(file);
                BufferedImage stageImage = ImageIO.read(image);
                
                //g.fillOval(int x, int y, WIDTH, HEIGHT);
                g.setColor(Color.white);
            
                g.fillOval(180, 60, 80, 80);
                g.drawImage(stageImage, 192, 72, null);
            }
            catch(IOException ex)
            {
                ex.printStackTrace();
            }
        }
    }
    
public class twoStage extends JPanel
{
    String[] pkmnNum;
    String lvl;

    public twoStage(){}

    public twoStage(String evoID)
    {
        pkmnNum = pkmnDB.getStages(evoID, "evolution_stage2");
        //lvl = pkmnNum[3];

        setSize(440, 200);
    }

    public void paintComponent(Graphics g)
    {
        try
        {
            String[] file = new String[2];
            File[] image = new File[2];
            BufferedImage[] stageImage = new BufferedImage[3];                

            for(int i = 0; i < 2; i++)
            {
                pkmnNum[i+1] = String.format("%3s", pkmnNum[i+1]).replace(' ', '0');

                file[i] = "Images/Gen. 1/" + pkmnNum[i+1] + game;

                if(left.isEnabled())
                    file[i] += "_color.png"; 
                else 
                    file[i] += ".png";

                image[i] = new File(file[i]);
                stageImage[i] = ImageIO.read(image[i]);
            }

            g.setColor(Color.white);

            //Stage 1 image
            //g.fillOval(int x, int y, WIDTH, HEIGHT);
            g.fillOval(112, 60, 80, 80);
            g.drawImage(stageImage[0], 123, 72, null);

            //Stage 2 image
            g.fillOval(250, 60, 80, 80);
            g.drawImage(stageImage[1], 261, 72, null);

            String evo = "";

            if(pkmnNum[3].equals("101"))        //  Trade
                evo = "trade.png";
            else if(pkmnNum[3].equals("102"))   //  Fire
                evo = "firestone.png";
            else if(pkmnNum[3].equals("103"))   //  Leaf
                evo = "leafstone.png";
            else if(pkmnNum[3].equals("104"))   //  Moon
                evo = "moonstone.png";
            else if(pkmnNum[3].equals("105"))   //  Thunder
                evo = "thunderstone.png";
            else if(pkmnNum[3].equals("106"))   //  Water
                evo = "waterstone.png";
            else                                //  Level
                evo = "l" + pkmnNum[3] + ".png";

            g.drawImage(ImageIO.read(new File("Images/Gen. 1/Evolution/" + evo)), 207, 60, null);
        }
        catch(IOException ex)
        {
            ex.printStackTrace();
        }
    }
}
    
    public class threeStage extends JPanel
    {
        String[] pkmnNum;
        String[] lvl;
        
        public threeStage(){}
        
        public threeStage(String evoID)
        {
            pkmnNum = pkmnDB.getStages(evoID, "evolution_stage3");
            
            setSize(440, 200);
        }
        
        public void paintComponent(Graphics g)
        {
            try
            {
                String[] file = new String[3];
                File[] image = new File[3];
                BufferedImage[] stageImage = new BufferedImage[3];                
                
                for(int i =0; i < 3; i++)
                {
                    pkmnNum[i+1] = String.format("%3s", pkmnNum[i+1]).replace(' ', '0');
                    
                    file[i] = "Images/Gen. 1/" + pkmnNum[i+1] + game;
                    
                    if(left.isEnabled())
                        file[i] += "_color.png"; 
                    else 
                        file[i] += ".png";
                    
                    image[i] = new File(file[i]);                    
                    stageImage[i] = ImageIO.read(image[i]);
                }
                
                g.setColor(Color.white);
            
                //Stage 1 image
                g.fillOval(40, 60, 80, 80);
                g.drawImage(stageImage[0], 52, 72, null);
                
                //Stage 2 image
                g.fillOval(178, 60, 80, 80);
                g.drawImage(stageImage[1], 190, 72, null);
                
                //Stage 3 image
                g.fillOval(315, 60, 80, 80);
                g.drawImage(stageImage[2], 327, 72, null);
    
                String[] evo1 = new String[2];
                
                for(int i = 0; i < 2; i++)
                {
                    if(pkmnNum[i+4].equals("101"))        //  Trade
                        evo1[i] = "trade.png";
                    else if(pkmnNum[i+4].equals("102"))   //  Fire
                        evo1[i] = "firestone.png";
                    else if(pkmnNum[i+4].equals("103"))   //  Leaf
                        evo1[i] = "leafstone.png";
                    else if(pkmnNum[i+4].equals("104"))   //  Moon
                        evo1[i] = "moonstone.png";
                    else if(pkmnNum[i+4].equals("105"))   //  Thunder
                        evo1[i] = "thunderstone.png";
                    else if(pkmnNum[i+4].equals("106"))   //  Water
                        evo1[i] = "waterstone.png";
                    else                                //  Level
                        evo1[i] = "l" + pkmnNum[i+4] + ".png";
                }
                
                g.drawImage(ImageIO.read(new File("Images/Gen. 1/Evolution/" + evo1[0])), 135, 60, null);
                g.drawImage(ImageIO.read(new File("Images/Gen. 1/Evolution/" + evo1[1])), 273, 60, null);
            }
            catch(IOException ex)
            {
                ex.printStackTrace();
            }
        }
    }
    
    public class branchEvolution extends JScrollPane
    {
        private String[] branchInfo;
        private JPanel branchDisplay = new JPanel();
        
        public branchEvolution(){}
        
        public branchEvolution(String stageType)
        {
            branchInfo = pkmnDB.getBranchInfo(stageType, pkmn);
                branchDisplay.setLayout(null);
            
            if(stageType.equals("stage2"))
                twoStage();
            else if(stageType.equals("stage3"))
                threeStage();
            
            setBounds(0, 0, 440, 203);
            setWheelScrollingEnabled(true);
            setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
            setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            getVerticalScrollBar().setUnitIncrement(200);
            getViewport().setScrollMode(JViewport.SIMPLE_SCROLL_MODE);
            setViewportView(branchDisplay);
        }
        
        public void twoStage()
        {
            int chains = branchInfo.length / 4;
            
            branchDisplay.setPreferredSize(new Dimension(440, (200 * chains)));
            
            twoStage[] branches = new twoStage[chains];
            
            for(int i = 0; i < chains; i++)              
            {
                branches[i] = new twoStage(branchInfo[i*4]);
                branches[i].setBounds(0, (200 * i), 440, 200);
                branchDisplay.add(branches[i]);
            }
        }
        
        public void threeStage()
        {
            int chains = branchInfo.length / 6;
            
            branchDisplay.setPreferredSize(new Dimension(440, (200 * chains)));
            
            twoStage[] branches = new twoStage[chains];
            
            for(int i = 0; i < chains; i++)              
            {
                branches[i] = new twoStage(branchInfo[i*6]);
                branches[i].setBounds(0, (200 * i), 440, 200);
                branchDisplay.add(branches[i]);
            }
        }
    }
}
